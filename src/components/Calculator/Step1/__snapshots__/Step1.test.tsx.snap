// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Step1 component should match snapshot if no change was intended 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Step1
    handleChange={[Function]}
    qualityLevel="high"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="title"
        >
          <h1>
            Live PPV Event ROI Calculator
          </h1>
        </div>,
        <Paragraph>
          Working with a Live PPV specialist can save you a lot of time and development costs.
        </Paragraph>,
        <img
          alt="icon"
          src="computer-phone.svg"
        />,
        <Paragraph>
          When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.
        </Paragraph>,
        <Paragraph>
          What level of streaming quality are you aiming for?
        </Paragraph>,
        <div
          className="level-holder"
        >
          <div
            className="input-container"
          >
            <input
              checked={true}
              id="high"
              name="qualityLevel"
              onChange={[Function]}
              type="radio"
              value="high"
            />
            <div
              className="label-container"
            >
              <label
                htmlFor="high"
              >
                High
              </label>
            </div>
          </div>
          <div
            className="input-container"
          >
            <input
              checked={false}
              id="mid"
              name="qualityLevel"
              onChange={[Function]}
              type="radio"
              value="mid"
            />
            <div
              className="label-container"
            >
              <label
                htmlFor="mid"
              >
                Mid
              </label>
            </div>
          </div>
          <div
            className="input-container"
          >
            <input
              checked={false}
              id="entry"
              name="qualityLevel"
              onChange={[Function]}
              type="radio"
              value="entry"
            />
            <div
              className="label-container"
            >
              <label
                htmlFor="entry"
              >
                Entry
              </label>
            </div>
          </div>
        </div>,
        <NextButton
          name="next question"
          to="step2"
        />,
        <CalculatorNavigation
          step={1}
        />,
      ],
      "className": "step1-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h1>
            Live PPV Event ROI Calculator
          </h1>,
          "className": "title",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Live PPV Event ROI Calculator",
          },
          "ref": null,
          "rendered": "Live PPV Event ROI Calculator",
          "type": "h1",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Working with a Live PPV specialist can save you a lot of time and development costs.",
        },
        "ref": null,
        "rendered": "Working with a Live PPV specialist can save you a lot of time and development costs.",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "alt": "icon",
          "src": "computer-phone.svg",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.",
        },
        "ref": null,
        "rendered": "When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "What level of streaming quality are you aiming for?",
        },
        "ref": null,
        "rendered": "What level of streaming quality are you aiming for?",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="input-container"
            >
              <input
                checked={true}
                id="high"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="high"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="high"
                >
                  High
                </label>
              </div>
            </div>,
            <div
              className="input-container"
            >
              <input
                checked={false}
                id="mid"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="mid"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="mid"
                >
                  Mid
                </label>
              </div>
            </div>,
            <div
              className="input-container"
            >
              <input
                checked={false}
                id="entry"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="entry"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="entry"
                >
                  Entry
                </label>
              </div>
            </div>,
          ],
          "className": "level-holder",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  checked={true}
                  id="high"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="high"
                />,
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="high"
                  >
                    High
                  </label>
                </div>,
              ],
              "className": "input-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "checked": true,
                  "id": "high",
                  "name": "qualityLevel",
                  "onChange": [Function],
                  "type": "radio",
                  "value": "high",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    htmlFor="high"
                  >
                    High
                  </label>,
                  "className": "label-container",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "High",
                    "htmlFor": "high",
                  },
                  "ref": null,
                  "rendered": "High",
                  "type": "label",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  checked={false}
                  id="mid"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="mid"
                />,
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="mid"
                  >
                    Mid
                  </label>
                </div>,
              ],
              "className": "input-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "checked": false,
                  "id": "mid",
                  "name": "qualityLevel",
                  "onChange": [Function],
                  "type": "radio",
                  "value": "mid",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    htmlFor="mid"
                  >
                    Mid
                  </label>,
                  "className": "label-container",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Mid",
                    "htmlFor": "mid",
                  },
                  "ref": null,
                  "rendered": "Mid",
                  "type": "label",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  checked={false}
                  id="entry"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="entry"
                />,
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="entry"
                  >
                    Entry
                  </label>
                </div>,
              ],
              "className": "input-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "checked": false,
                  "id": "entry",
                  "name": "qualityLevel",
                  "onChange": [Function],
                  "type": "radio",
                  "value": "entry",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    htmlFor="entry"
                  >
                    Entry
                  </label>,
                  "className": "label-container",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Entry",
                    "htmlFor": "entry",
                  },
                  "ref": null,
                  "rendered": "Entry",
                  "type": "label",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "name": "next question",
          "to": "step2",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "step": 1,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="title"
          >
            <h1>
              Live PPV Event ROI Calculator
            </h1>
          </div>,
          <Paragraph>
            Working with a Live PPV specialist can save you a lot of time and development costs.
          </Paragraph>,
          <img
            alt="icon"
            src="computer-phone.svg"
          />,
          <Paragraph>
            When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.
          </Paragraph>,
          <Paragraph>
            What level of streaming quality are you aiming for?
          </Paragraph>,
          <div
            className="level-holder"
          >
            <div
              className="input-container"
            >
              <input
                checked={true}
                id="high"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="high"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="high"
                >
                  High
                </label>
              </div>
            </div>
            <div
              className="input-container"
            >
              <input
                checked={false}
                id="mid"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="mid"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="mid"
                >
                  Mid
                </label>
              </div>
            </div>
            <div
              className="input-container"
            >
              <input
                checked={false}
                id="entry"
                name="qualityLevel"
                onChange={[Function]}
                type="radio"
                value="entry"
              />
              <div
                className="label-container"
              >
                <label
                  htmlFor="entry"
                >
                  Entry
                </label>
              </div>
            </div>
          </div>,
          <NextButton
            name="next question"
            to="step2"
          />,
          <CalculatorNavigation
            step={1}
          />,
        ],
        "className": "step1-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h1>
              Live PPV Event ROI Calculator
            </h1>,
            "className": "title",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Live PPV Event ROI Calculator",
            },
            "ref": null,
            "rendered": "Live PPV Event ROI Calculator",
            "type": "h1",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Working with a Live PPV specialist can save you a lot of time and development costs.",
          },
          "ref": null,
          "rendered": "Working with a Live PPV specialist can save you a lot of time and development costs.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "icon",
            "src": "computer-phone.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.",
          },
          "ref": null,
          "rendered": "When you are building your monetization platform, you consider the costs of design, streaming, along with landing page and e-commerce checkout development.",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "What level of streaming quality are you aiming for?",
          },
          "ref": null,
          "rendered": "What level of streaming quality are you aiming for?",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="input-container"
              >
                <input
                  checked={true}
                  id="high"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="high"
                />
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="high"
                  >
                    High
                  </label>
                </div>
              </div>,
              <div
                className="input-container"
              >
                <input
                  checked={false}
                  id="mid"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="mid"
                />
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="mid"
                  >
                    Mid
                  </label>
                </div>
              </div>,
              <div
                className="input-container"
              >
                <input
                  checked={false}
                  id="entry"
                  name="qualityLevel"
                  onChange={[Function]}
                  type="radio"
                  value="entry"
                />
                <div
                  className="label-container"
                >
                  <label
                    htmlFor="entry"
                  >
                    Entry
                  </label>
                </div>
              </div>,
            ],
            "className": "level-holder",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    checked={true}
                    id="high"
                    name="qualityLevel"
                    onChange={[Function]}
                    type="radio"
                    value="high"
                  />,
                  <div
                    className="label-container"
                  >
                    <label
                      htmlFor="high"
                    >
                      High
                    </label>
                  </div>,
                ],
                "className": "input-container",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "checked": true,
                    "id": "high",
                    "name": "qualityLevel",
                    "onChange": [Function],
                    "type": "radio",
                    "value": "high",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <label
                      htmlFor="high"
                    >
                      High
                    </label>,
                    "className": "label-container",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "High",
                      "htmlFor": "high",
                    },
                    "ref": null,
                    "rendered": "High",
                    "type": "label",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    checked={false}
                    id="mid"
                    name="qualityLevel"
                    onChange={[Function]}
                    type="radio"
                    value="mid"
                  />,
                  <div
                    className="label-container"
                  >
                    <label
                      htmlFor="mid"
                    >
                      Mid
                    </label>
                  </div>,
                ],
                "className": "input-container",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "checked": false,
                    "id": "mid",
                    "name": "qualityLevel",
                    "onChange": [Function],
                    "type": "radio",
                    "value": "mid",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <label
                      htmlFor="mid"
                    >
                      Mid
                    </label>,
                    "className": "label-container",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Mid",
                      "htmlFor": "mid",
                    },
                    "ref": null,
                    "rendered": "Mid",
                    "type": "label",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    checked={false}
                    id="entry"
                    name="qualityLevel"
                    onChange={[Function]}
                    type="radio"
                    value="entry"
                  />,
                  <div
                    className="label-container"
                  >
                    <label
                      htmlFor="entry"
                    >
                      Entry
                    </label>
                  </div>,
                ],
                "className": "input-container",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "checked": false,
                    "id": "entry",
                    "name": "qualityLevel",
                    "onChange": [Function],
                    "type": "radio",
                    "value": "entry",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <label
                      htmlFor="entry"
                    >
                      Entry
                    </label>,
                    "className": "label-container",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Entry",
                      "htmlFor": "entry",
                    },
                    "ref": null,
                    "rendered": "Entry",
                    "type": "label",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "name": "next question",
            "to": "step2",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "step": 1,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
